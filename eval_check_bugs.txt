EVAL CHECK 

No refactoring if not absolutely necessary! Go through checklist first.


COMPILER WARNINGS

execution/handle_exec_cmd.c:26:10: warning: incompatible pointer types passing 'char *[100]' to parameter of type 't_exec *' (aka 'struct s_exec *') [-Wincompatible-pointer-types]
                        ft_cd(exec_cmd->argv, head, info);
                              ^~~~~~~~~~~~~~
execution/../minishell_tree.h:152:20: note: passing argument to parameter 'exec_cmd' here
void    ft_cd(t_exec *exec_cmd, t_env **head, t_info **info);
                      ^
execution/handle_exec_cmd.c:39:13: warning: incompatible pointer types passing 'char *[100]' to parameter of type 't_exec *' (aka 'struct s_exec *') [-Wincompatible-pointer-types]
                ft_export(exec_cmd->argv, head, info);
                          ^~~~~~~~~~~~~~
execution/../minishell_tree.h:161:27: note: passing argument to parameter 'exec_cmd' here
void    ft_export(t_exec *exec_cmd, t_env **head, t_info **info);



CTRL+C:

- ctrl-C in a prompt after you wrote some stuff should display a new line
								with a new prompt.
EXIT code should be 130, now it's 0

minishell> echo hey^C
minishell> echo $?
0

zhedlund@c4b10c2:~$ echo hey^C
zhedlund@c4b10c2:~$ echo $?
130

- Try ctrl-C after running a blocking command like cat  without arguments or grep “something“:
	
	
minishell> cat
^C
minishell> echo $?
0                        <<< wrong, should be 130
minishell> grep "hey"
^C
minishell> echo $?
127                     <<< wrong, should be 130
minishell> 	

Bash:			

zhedlund@c4b10c2:~$ cat
^C
zhedlund@c4b10c2:~$ echo $?
130
zhedlund@c4b10c2:~$ grep "hey"
^C
zhedlund@c4b10c2:~$ echo $?
130

CTRL-\:

- Try ctrl-\ after running a blocking command like cat without arguments or grep “something“:

minishell> cat
^\Quit (core dumped)
minishell> echo $?
0                         <<< wrong, should be 131
minishell> grep "hey"
^\minishell> echo $?    <<< wrong, should be ^\Quit (core dumped) on new line
0                       <<< wrong, should be 131
minishell>

Bash:

zhedlund@c4b10c2:~$ grep "hey"
^\Quit (core dumped)
zhedlund@c4b10c2:~$ echo $?
131
zhedlund@c4b10c2:~$ cat
^\Quit (core dumped)
zhedlund@c4b10c2:~$ echo $?


EXPORT: doesn't work

c4b10c2% ./minishell
minishell> export this=that
made it to export
check[0]== this=that
check[1]== (null)
here!!
free(): invalid pointer
zsh: IOT instruction (core dumped)  ./minishell
c4b10c2% ./minishell
minishell> export "this=that"
made it to export
check[0]== this=that
check[1]== (null)
here!!
free(): invalid pointer
zsh: IOT instruction (core dumped)  ./minishell
minishell> export MAIL=zhedlund@student.42berlin.de
made it to export
check[0]== MAIL=zhedlund@student.42berlin.de
check[1]== (null)
here!!
free(): invalid pointer
zsh: IOT instruction (core dumped)  ./minishell

CD: doesn't work

minishell> cd utils/
free(): invalid pointer
zsh: IOT instruction (core dumped)  ./minishell

	
ENV: 
	it now prints the full line from env,
	it should only print the variable, not the label:
	
	minishell> echo "hello $USER, this is your home: $HOME"
	output: hello USER=zhedlund, this is your home: HOME=/home/zhedlund
	expected: hello zhedlund, this is your home: /home/zhedlund


- Set the $PATH to a multiple directory value (directory1:directory2)
	and ensure that directories are checked in order from left to right.
	- I have no idea how to test this?	

